class Barrier{constructor(e,t,i,a,s,u,m,l,r,h,p){this.texture=r,this.jumped=!1,this.origW=h,this.origH=p,this.initialP={x:e,y:t,z:i},this.p={x:e,y:t,z:i},this.v={x:a,y:s,z:u},this.width=m/i,this.height=l/i}show(){this.texture.show(this.p.x,this.p.y,this.origW,this.origH)}update(){this.p.x+=this.v.x,this.p.y+=this.v.y,this.p.z+=this.v.z,this.v.x=Math.abs(this.p.x-this.initialP.x)>BlueJumpGame.MOVEMENT?-1*this.v.x:this.v.x}}class BlueJumpGame{constructor(){this.gameMode,this.dirtBlock,this.brickBlock,this.barriers=[],this.fakeBarriers=[],this.textAnimations=[],this.colours=[],this.orientedMovement=0,this.rotation=0,this.highest=0,this.fullScreenActive=!1,this.returned=!1,BlueJumpGame.MOBILE_CONTROLS?(window.addEventListener("deviceorientation",this.deviceOrientationHandler),BlueJumpGame.BARRIER_SCALE*=2.5,BlueJumpGame.MOVEMENT*=2.5,BlueJumpGame.ARROW_SCALE*=2.5,BlueJumpGame.CONTROLS_MSG="Tilt your device to move",BlueJumpGame.TIP="TIP: use portrait mode!",BlueJumpGame.JUMP_POWER=20):(BlueJumpGame.CONTROLS_MSG="Use arrow keys (< and >) or 'A' and 'D' to move",BlueJumpGame.TIP="TIP: press 'esc' to pause the game",BlueJumpGame.JUMP_POWER=30),this.player=new Player(width/2-BlueJumpGame.BARRIER_SCALE/3,3*height/4,BlueJumpGame.blueGuy02,BlueJumpGame.blueGuy03,BlueJumpGame.blueGuy04,BlueJumpGame.transition,BlueJumpGame.grave),BlueJumpGame.spikesFloor=new Floor(BlueJumpGame.spikes[0],BlueJumpGame.spikes[1],BlueJumpGame.spikes[2],BlueJumpGame.spikes[3],BlueJumpGame.spikes[4]),BlueJumpGame.lavaFloor=new Floor(BlueJumpGame.lava[0],BlueJumpGame.lava[1],BlueJumpGame.lava[2],BlueJumpGame.lava[3],BlueJumpGame.lava[4]),this.barriers.push(new Barrier(this.player.p.x+.5*this.player.activities[this.player.activity].width-.5*BlueJumpGame.BARRIER_SCALE,this.player.p.y+this.player.activities[this.player.activity].height,1,0,0,0,BlueJumpGame.BARRIER_SCALE,.25*BlueJumpGame.BARRIER_SCALE,new Sprite(BlueJumpGame.dirtblock[0],BlueJumpGame.dirtblock[1],BlueJumpGame.dirtblock[2],BlueJumpGame.dirtblock[3],BlueJumpGame.dirtblock[4],BlueJumpGame.dirtblock[5],BlueJumpGame.dirtblock[6]),150,46)),this.pickNewHighest(0,!0),this.gameMode(-1)}gameMode(e){switch(e){case-1:this.gameMode=-1,this.player.shouldUpdate=!1;break;case 0:this.gameMode=0,this.player.shouldUpdate=!0;break;case 1:this.gameMode=1,this.player.shouldUpdate=!1}}play(){BlueJumpGame.prefix(document,"FullScreen")||BlueJumpGame.prefix(document,"IsFullScreen")||BlueJumpGame.prefix(document.getElementById("defaultCanvas0"),"RequestFullScreen"),1!==this.gameMode&&setTimeout(()=>{this.fullScreenActive=!0,this.gameMode(0)},60)}pickNewHighest(e,t,i){let a,s;if(this.player.stats.alive?(s=BlueJumpGame.dirtblock,a=46):Math.random()<.25?(s=BlueJumpGame.brickblock0,a=46):(s=BlueJumpGame.brickblock1,a=33),t){const e=10+Math.random()*(width-110),t=i?Math.random()*((BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height)+200)-200:175*Math.random()-200,u=2+1.1*Math.random();this.fakeBarriers.push(new Barrier(e,t,u,0,0,0,BlueJumpGame.BARRIER_SCALE,.25*BlueJumpGame.BARRIER_SCALE,new Sprite(s[0],s[1]/u,s[2]/u,s[3],s[4],s[5],s[6]),150,a))}else{const t=.02*Math.floor(this.player.stats.score/2500)*BlueJumpGame.BARRIER_SCALE;t=constrain(t,0,.5*BlueJumpGame.BARRIER_SCALE);const i=BlueJumpGame.MOBILE_CONTROLS?.5:.8,u=Math.random()<.5?1:-1,m=.5*(BlueJumpGame.JUMP_POWER*BlueJumpGame.JUMP_POWER+BlueJumpGame.JUMP_POWER)/BlueJumpGame.GRAVITY,l=1.7*BlueJumpGame.JUMP_POWER*BlueJumpGame.HORIZONTAL_SPEED*i*1.2+t;l=constrain(l,0,width);const r=(.3+.7*Math.random())*m,h=constrain(e.x+u*(.3+.7*Math.random())*l,BlueJumpGame.MOVEMENT,width-BlueJumpGame.BARRIER_SCALE-BlueJumpGame.MOVEMENT);this.barriers.push(new Barrier(h,e.y-r,1,6*Math.random()*i-3,0,0,BlueJumpGame.BARRIER_SCALE,.25*BlueJumpGame.BARRIER_SCALE,new Sprite(s[0],s[1],s[2],s[3],s[4],s[5],s[6]),150,a))}}deviceOrientationHandler(e){this.rotation=e.gamma,this.orientedMovement=.020444*e.gamma}static prefix(e,t){let i,a,s=0;for(;s<BlueJumpGame.pfx.length&&!e[i];){if(i=t,""===BlueJumpGame.pfx[s]&&(i=i.substr(0,1).toLowerCase()+i.substr(1)),"undefined"!=(a=typeof e[i=BlueJumpGame.pfx[s]+i]))return BlueJumpGame.pfx=[BlueJumpGame.pfx[s]],"function"==a?e[i]():e[i];s++}}static isMobileDevice(){let e=!1;var t;return t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e}}BlueJumpGame.AUTOJUMP=!0,BlueJumpGame.DEBUG=!0,BlueJumpGame.LEVELCREATION=!0,BlueJumpGame.LANDING_THRESHOLD=25,BlueJumpGame.HORIZONTAL_SPEED=11,BlueJumpGame.GRAVITY=1,BlueJumpGame.BARRIER_SCALE=.07*window.screen.width,BlueJumpGame.ARROW_SCALE=.06*window.screen.width,BlueJumpGame.MOVEMENT=.75*BlueJumpGame.BARRIER_SCALE,BlueJumpGame.BACKGROUND_SHADES=13,BlueJumpGame.MAX_BARRIERS=12,BlueJumpGame.CONTROLS_MSG="",BlueJumpGame.TIP="",BlueJumpGame.MOBILE_CONTROLS=BlueJumpGame.isMobileDevice(),BlueJumpGame.JUMP_POWER,BlueJumpGame.TEXT_SIZE=.5*BlueJumpGame.BARRIER_SCALE,BlueJumpGame.FONT,BlueJumpGame.pfx=["webkit","moz","ms","o",""],BlueJumpGame.field,BlueJumpGame.IS_SAFARI=Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")>0,BlueJumpGame.dirtblock=[null,BlueJumpGame.BARRIER_SCALE,.25*BlueJumpGame.BARRIER_SCALE,1,!1,0,0],BlueJumpGame.spikes=[null,5/3*BlueJumpGame.BARRIER_SCALE,.513*BlueJumpGame.BARRIER_SCALE,1,!1,0,0],BlueJumpGame.lava=[null,5/3*BlueJumpGame.BARRIER_SCALE,.558*BlueJumpGame.BARRIER_SCALE,5,!0,0,0],BlueJumpGame.brickblock0=[null,BlueJumpGame.BARRIER_SCALE,.25*BlueJumpGame.BARRIER_SCALE,1,!1,0,0],BlueJumpGame.brickblock1=[null,BlueJumpGame.BARRIER_SCALE,.25*BlueJumpGame.BARRIER_SCALE,1,!1,0,0],BlueJumpGame.blueGuy02=[null,2*BlueJumpGame.BARRIER_SCALE/3,2*BlueJumpGame.BARRIER_SCALE/3,7,!0,18,18],BlueJumpGame.blueGuy03=[null,2*BlueJumpGame.BARRIER_SCALE/3,2*BlueJumpGame.BARRIER_SCALE/3,10,!1,19,19],BlueJumpGame.blueGuy04=[null,2*BlueJumpGame.BARRIER_SCALE/3,2*BlueJumpGame.BARRIER_SCALE/3,6,!1,19,19],BlueJumpGame.transition=[null,2*BlueJumpGame.BARRIER_SCALE/3,2.2*BlueJumpGame.BARRIER_SCALE/3,1,!1,0,0],BlueJumpGame.grave=[null,2*BlueJumpGame.BARRIER_SCALE/3,2.2*BlueJumpGame.BARRIER_SCALE/3,1,!1,0,0];class Floor{constructor(e,t,i,a,s){this.sprite=new Sprite(e,t,i,a,s,0,0,30),this.repeats=Math.ceil(window.screen.width/t)}show(e,t){for(let i=0;i<this.repeats;i++)this.sprite.show(i*this.sprite.displayWidth,(BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height)-this.sprite.displayHeight,e,t)}}class Player{constructor(e,t){this.highestY=t,this.buried=!1,this.shouldUpdate=!0,this.initialP={x:e,y:t},this.p={x:e,y:t},this.v={x:0,y:0},this.a={x:0,y:BlueJumpGame.GRAVITY},this.stats={score:0,pixelsTraversed:0,barriersJumped:0,alive:!0},this.activity=0,this.activities=[];for(let e=2;e<=6;e++)void 0!==arguments[e]&&(this.activities.push(new Sprite(arguments[e][0],arguments[e][1],arguments[e][2],arguments[e][3],arguments[e][4],arguments[e][5],arguments[e][6])),this.walk=function(){this.activity=1});this.falling=!0}fall(){this.falling=!0,this.a.y=BlueJumpGame.GRAVITY}stand(){this.activity=0}getTraversedPixels(){return this.highestY=this.highestY>this.p.y?this.p.y:this.highestY,Math.round(this.stats.pixelsTraversed+this.initialP.y-this.highestY)}getScore(){const e=3*this.getTraversedPixels()+400*(this.stats.barriersJumped-1)*.7;return Math.round(e)}update(){if(!BlueJumpGame.AUTOJUMP&&!keyDown(32)||this.falling||this.jump(),this.stats.alive&&this.stand(),this.v.x=0,BlueJumpGame.MOBILE_CONTROLS?this.v.x=BlueJumpGame.HORIZONTAL_SPEED*orientedMovement:(keyDown(37)||keyDown("a"))!==(keyDown(39)||keyDown("d"))&&(this.stats.alive&&this.walk(),keyDown(37)||keyDown("a")?this.v.x=-BlueJumpGame.HORIZONTAL_SPEED:this.v.x=BlueJumpGame.HORIZONTAL_SPEED),this.p.x=constrain(this.p.x+this.v.x,0,width-this.activities[this.activity].width),this.p.y=constrain(this.p.y+this.v.y,0,height-this.activities[this.activity].height),this.v.x+=this.a.x,this.v.y+=this.a.y,this.p.y<height/3){const e=height/3-this.p.y;this.stats.pixelsTraversed+=e,this.p.y=height/3;for(let t=0;t<bj.barriers.length;t++)bj.barriers[t].p.y+=e,bj.barriers[t].p.y>=height-40&&bj.barriers.splice(t,1);for(let t=0;t<fakeBarriers.length;t++)fakeBarriers[t].p.y+=e/fakeBarriers[t].p.z,fakeBarriers[t].p.y>=height-50&&fakeBarriers.splice(t,1)}this.a.y=BlueJumpGame.GRAVITY,this.p.y+this.activities[this.activity].height>=height&&(this.stats.alive?(this.land(),this.die()):this.bury());for(let e=0;e<barriers.length;e++)this.collide(barriers[e])&&this.p.y+this.activities[this.activity].height>=barriers[e].p.y&&this.p.y+this.activities[this.activity].height-barriers[e].p.y<=LANDING_THRESHOLD&&this.v.y>0&&(this.land(barriers[e].p.y-this.activities[this.activity].height,barriers[e].v.x),barriers[e].jumped||this.stats.barriersJumped++,barriers[e].jumped=!0);this.stats.score=this.getScore()}jump(e){const t=void 0!==e?e:BlueJumpGame.JUMP_POWER;this.fall(),this.v.y-=t}land(e,t){this.falling=!1,this.a.y=0,this.v.y=0,void 0!==e&&(this.p.y=e),void 0!==t&&(this.p.x+=2*t)}collide(e){return this.p.x+this.activities[this.activity].width-this.activities[this.activity].padding.right>=e.p.x&&this.p.x+this.activities[this.activity].padding.left<=e.p.x+e.width&&this.p.y+this.activities[this.activity].height>=e.p.y&&this.p.y<=e.p.y+e.height}die(){this.shouldUpdate=!1,this.activity=3,this.p.y=(BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height)-3*BlueJumpGame.BARRIER_SCALE/3,textAnimations.push(new TextAnimation(3,.8*width,2*BlueJumpGame.TEXT_SIZE,frameRate()/3,2*frameRate()/3,[0,0,0],frameCount)),setTimeout(()=>{textAnimations.push(new TextAnimation(2,.8*width,2*BlueJumpGame.TEXT_SIZE,frameRate()/3,2*frameRate()/3,[0,0,0],frameCount))},1e3),setTimeout(()=>{textAnimations.push(new TextAnimation(1,.8*width,2*BlueJumpGame.TEXT_SIZE,frameRate()/3,2*frameRate()/3,[0,0,0],frameCount))},2e3),setTimeout(()=>{this.stats.alive=!1,this.activity=2,this.jump(2.2*JUMP_POWER),this.shouldUpdate=!0,textAnimations.push(new TextAnimation("SECOND CHANCE!",.8*width,1.5*BlueJumpGame.TEXT_SIZE,frameRate()/3,2*frameRate(),[0,0,0],frameCount))},3200)}resurrect(){this.stats.alive=!0,this.activity=0}bury(){this.shouldUpdate=!1,this.burying=setInterval(()=>{this.p.y+=2,this.p.y>=(BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height)-BlueJumpGame.BARRIER_SCALE/3&&(clearInterval(this.burying),this.activity=4,this.burying=setInterval(()=>{this.p.y--,this.p.y<=(BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height)-2.7*BlueJumpGame.BARRIER_SCALE/3&&(clearInterval(this.burying),textAnimations.push(new TextAnimation("GAME OVER!",.8*width,1.5*txtSize,frameRate()/3,1/0,[0,0,0],frameCount,width/2,100)),gameMode(1),this.buried=!0)},1e3/frameRate()))},1e3/frameRate())}}class Sprite{constructor(e,t,i,a,s,u,m,l){this.img=e,this.displayWidth=t,this.displayHeight=i,this.framesCount=a,this.action=s,this.count=0,this.fpsScale=void 0===l?2:l,this.padding={left:void 0===u?0:u,right:void 0===m?0:m}}show(e,t,i,a){let s=Math.floor(this.count/this.fpsScale)%this.framesCount;const u=void 0===i?this.displayWidth:i,m=void 0===a?this.displayHeight:a;this.count++,this.action&&s===this.framesCount-1&&Math.random()>.25&&(s=0,this.count++),image(this.img,e,t,this.displayWidth,this.displayHeight,s*u,0,u,m)}}class Text{constructor(e,t,i,a,s,u,m,l,r){this.text=e,this.finalSize=i,this.currentSize=t-t%i,this.decrease=(this.currentSize-this.finalSize)/a,this.transition=a,this.delay=s,this.colour=u,this.creation=m,this.x=void 0===l?width/2:l,this.y=void 0===r?height/2:r}update(){this.currentSize>this.finalSize&&(this.currentSize-=this.decrease)}show(){textSize(this.currentSize),textAlign(CENTER),fill(this.colour),stroke(255),strokeWeight(6),text(this.text,this.x,this.y)}shouldBeDeleted(){return frameCount<=this.transition+this.delay+this.creation}}let bj;function preload(){BlueJumpGame.dirtblock[0]=loadImage("assets/img/dirt0.png"),BlueJumpGame.spikes[0]=loadImage("assets/img/spikes.png"),BlueJumpGame.brickblock0[0]=loadImage("assets/img/bricks0.png"),BlueJumpGame.brickblock1[0]=loadImage("assets/img/bricks1.png"),BlueJumpGame.transition[0]=loadImage("assets/img/transition.png"),BlueJumpGame.grave[0]=loadImage("assets/img/grave.png"),BlueJumpGame.blueGuy02[0]=loadImage("assets/img/sprites/bouncing.png"),BlueJumpGame.blueGuy03[0]=loadImage("assets/img/sprites/walking.png"),BlueJumpGame.blueGuy04[0]=loadImage("assets/img/sprites/undead.png"),BlueJumpGame.lava[0]=loadImage("assets/img/sprites/lava.png"),BlueJumpGame.FONT=loadFont("assets/fonts/robot01.ttf")}function setup(){bj=new BlueJumpGame,BlueJumpGame.dirtblock[0].loadPixels(),BlueJumpGame.spikes[0].loadPixels(),BlueJumpGame.brickblock0[0].loadPixels(),BlueJumpGame.brickblock1[0].loadPixels(),BlueJumpGame.transition[0].loadPixels(),BlueJumpGame.grave[0].loadPixels(),BlueJumpGame.blueGuy02[0].loadPixels(),BlueJumpGame.blueGuy03[0].loadPixels(),BlueJumpGame.blueGuy04[0].loadPixels(),BlueJumpGame.lava[0].loadPixels(),BlueJumpGame.IS_SAFARI?createCanvas(window.screen.width,windowHeight):createCanvas(window.screen.width,window.screen.height),BlueJumpGame.field=document.getElementById("defaultCanvas0").getContext("2d"),colorMode(RGB),bj.colours=[color(64,112,184),color(191,218,235),color(90,0,0),color(200,0,0)],0===BlueJumpGame.MOBILE_CONTROLS?frameRate(30):frameRate(27),textFont(BlueJumpGame.FONT)}function draw(){background(51),noStroke();for(let e=0;e<1;e+=1/BlueJumpGame.BACKGROUND_SHADES){const t=bj.player.stats.alive?0:2,i=lerpColor(bj.colours[t],bj.colours[t+1],e);fill(i),rect(0,height*e,width,height*(e+1))}let e=bj.fakeBarriers[0];for(let t=0;t<bj.fakeBarriers.length;t++)bj.fakeBarriers[t].p.y<e.p.y&&(e=bj.fakeBarriers[t]),bj.fakeBarriers[t].show();bj.fakeBarriers.length<BlueJumpGame.MAX_BARRIERS&&bj.pickNewHighest(e.p,!0,bj.fakeBarriers.length<BlueJumpGame.MAX_BARRIERS-2);let t=bj.barriers[0];for(let e=0;e<bj.barriers.length;e++)bj.barriers[e].p.y<t.p.y&&(t=bj.barriers[e]),bj.barriers[e].show();t.p.y>-100&&BlueJumpGame.LEVELCREATION&&bj.pickNewHighest(t.p,!1),BlueJumpGame.DEBUG&&(textAlign(RIGHT),textSize(18),stroke(0),fill(255,255,0),text("Score: "+bj.player.getScore(),width-60,60),text("Barriers: "+bj.player.stats.barriersJumped,width-60,90),text("Pixels traversed vertically: "+bj.player.getTraversedPixels(),width-60,120),text("FPS: "+Math.round(frameRate()),width-60,150),text("Controls: "+BlueJumpGame.MOBILE_CONTROLS,width-60,210),text("rotation: "+bj.rotation.toFixed(3),width-60,240),text("orientedMovement: "+bj.orientedMovement.toFixed(3),width-60,270),text("barriersLength: "+bj.fakeBarriers.length,width-60,300),text("width: "+window.screen.width,width-60,330),text("height: "+(BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height),width-60,360),text("mouseX, mouseY: "+mouseX+", "+mouseY,width-60,390)),bj.player.activities[bj.player.activity].show(bj.player.p.x,bj.player.p.y,100,100),bj.player.stats.alive?BlueJumpGame.spikesFloor.show(150,46):BlueJumpGame.lavaFloor.show(150,50);for(let e=0;e<bj.textAnimations.length;e++)bj.textAnimations[e].shouldBeDeleted()?(bj.textAnimations[e].update(),bj.textAnimations[e].show()):bj.textAnimations[e].splice(e,1);switch(bj.gameMode){case 0:BlueJumpGame.IS_SAFARI||BlueJumpGame.prefix(document,"FullScreen")||BlueJumpGame.prefix(document,"IsFullScreen")||(gameMode(-1),bj.fullScreenActive=!1);for(let e=0;e<barriers.length;e++)barriers[e].update();bj.player.shouldUpdate&&bj.fullScreenActive&&bj.player.update();break;case-1:noStroke(),fill("rgba(0,0,0,0.8)"),rect(0,0,window.screen.width,BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height),fill(200,200,0),strokeWeight(.125*BlueJumpGame.ARROW_SCALE),stroke(255),push(),translate(100,30),beginShape(),vertex(0,0),vertex(1.05*BlueJumpGame.ARROW_SCALE,.27*BlueJumpGame.ARROW_SCALE),vertex(.62*BlueJumpGame.ARROW_SCALE,.55*BlueJumpGame.ARROW_SCALE),vertex(1.65*BlueJumpGame.ARROW_SCALE,2.085*BlueJumpGame.ARROW_SCALE),vertex(1.18*BlueJumpGame.ARROW_SCALE,2.41*BlueJumpGame.ARROW_SCALE),vertex(.18*BlueJumpGame.ARROW_SCALE,.79*BlueJumpGame.ARROW_SCALE),vertex(-.25*BlueJumpGame.ARROW_SCALE,BlueJumpGame.ARROW_SCALE),endShape(CLOSE),pop(),textAlign(LEFT),textSize(BlueJumpGame.TEXT_SIZE),fill(0),text("PLAY",100,30+3*BlueJumpGame.ARROW_SCALE),strokeWeight(.0675*BlueJumpGame.ARROW_SCALE),textSize(.5*BlueJumpGame.TEXT_SIZE),text(BlueJumpGame.CONTROLS_MSG,40,4*BlueJumpGame.ARROW_SCALE),text(BlueJumpGame.TIP,40,4.7*BlueJumpGame.ARROW_SCALE);break;case 1:noStroke(),fill("rgba(0, 0, 0, 0.4)"),rect(0,0,window.screen.width,BlueJumpGame.IS_SAFARI?windowHeight:window.screen.height);const e=width/2-4.87*BlueJumpGame.TEXT_SIZE;bj.returned?(fill(255,128,0),textSize(BlueJumpGame.TEXT_SIZE),textAlign(CENTER),textSize(.5*BlueJumpGame.TEXT_SIZE),textAlign(LEFT),text("#",e,1.7*BlueJumpGame.TEXT_SIZE+115),text("Player",e+1.2*BlueJumpGame.TEXT_SIZE,1.7*BlueJumpGame.TEXT_SIZE+115),text("Score",e+8*BlueJumpGame.TEXT_SIZE,1.7*BlueJumpGame.TEXT_SIZE+115),fill(255,255,255)):(textSize(BlueJumpGame.TEXT_SIZE),textAlign(CENTER),floor(frameCount/2)%4==0?text("loading",width/2,height/2):floor(frameCount/2)%4==1?text("loading.",width/2,height/2):floor(frameCount/2)%4==2?text("loading..",width/2,height/2):text("loading...",width/2,height/2))}fill(0),strokeWeight(3),stroke(255),textAlign(CENTER),textSize(.9*BlueJumpGame.TEXT_SIZE),text(bj.player.stats.score,width/2,.8*BlueJumpGame.TEXT_SIZE),textAlign(RIGHT),textFont("arial"),textSize(.3*BlueJumpGame.TEXT_SIZE),noStroke(),text("©",width-.3*BlueJumpGame.BARRIER_SCALE-2*BlueJumpGame.TEXT_SIZE,height/2),textFont(BlueJumpGame.FONT),textSize(.2*BlueJumpGame.TEXT_SIZE),text("| 2016 | Nout Kleef",width-.3*BlueJumpGame.BARRIER_SCALE,height/2)}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
